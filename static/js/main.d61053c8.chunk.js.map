{"version":3,"sources":["reducers/index.js","components/From.js","actions/index.js","components/Result.js","containers/App.js","index.js"],"names":["rootReducer","combineReducers","view","state","loading","action","type","random","result","data","connect","props","useState","columns","amount","initialNumber","finalNumber","setState","className","autocomplete","onSubmit","e","preventDefault","dispatch","fetch","method","headers","body","JSON","stringify","then","response","json","fetchRandom","htmlFor","name","id","onChange","event","target","value","disabled","orderedNumbers","numbersList","map","i","App","Component","middleware","thunk","store","createStore","reducer","composeWithDevTools","applyMiddleware","render","document","getElementById"],"mappings":"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","file":"static/js/main.d61053c8.chunk.js","sourcesContent":["import { combineReducers } from 'redux'\r\n\r\nfunction view(state = { loading: false }, action) {\r\n    switch (action.type) {\r\n        //TODO: refactorizar\r\n        case \"view-loading\": {\r\n            return {\r\n                loading: true\r\n            }\r\n        }\r\n        case \"view-loaded\": {\r\n            return {\r\n                loading: false\r\n            }\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nfunction random(state = { result: {} }, action) {\r\n    switch (action.type) {\r\n        case \"random-result\": {\r\n            return { result: action.data }\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    view, random\r\n})\r\n\r\nexport default rootReducer","import React, { useState } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { fetchRandom } from '../actions';\r\n\r\nconst From = (props) => {// component stateless\r\n    const [state, setState] = useState({columns: 0, amount: 0, initialNumber: 0, finalNumber: 0});\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        props.dispatch(fetchRandom(state));\r\n    };\r\n    return <div className='contenedorForm'>\r\n        <form autocomplete=\"off\" className='form' onSubmit={onSubmit}>\r\n            <h3 className='subtitulo'>Introduce los parametros</h3>\r\n            <ol>\r\n                <li>\r\n                <label className='formLabel' htmlFor='amount'>Cantidad de numeros: </label>\r\n            <input className='formInput' name='amount' id='amount' onChange={(event) => setState({...state, [event.target.id]: event.target.value})}/>\r\n                </li>\r\n                <li>\r\n                <label className='formLabel' htmlFor='initialNumber'>Menor numero posible:</label>\r\n            <input className='formInput' name='initialNumber' id='initialNumber' onChange={(event) => setState({...state, [event.target.id]: event.target.value})}/>\r\n                </li>\r\n                <li>\r\n                <label className='formLabel' htmlFor='finalNumber'>Mayor numero posible:</label>\r\n            <input className='formInput' name='finalNumber' id='finalNumber' onChange={(event) => setState({...state, [event.target.id]: event.target.value})}/>\r\n                </li>\r\n            </ol>\r\n            \r\n            <button className=\"boton\" type=\"submit\" disabled={props.loading}>Get numbers</button>\r\n        </form>\r\n    </div>\r\n}\r\n\r\n\r\nconst stateMapToProps = state => {\r\n    return {\r\n        loading: state.view.loading\r\n    }\r\n}\r\n\r\n\r\nexport default connect(stateMapToProps)(From)\r\n","\r\n\r\nexport const fetchRandom = (state) => (dispatch) => {\r\n\r\n    dispatch({ type: \"view-loading\" });\r\n    \r\n    return (\r\n        fetch(`http://localhost:8080/random`, {\r\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(state) // body data type must match \"Content-Type\" header\r\n        })\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            dispatch({ type: \"random-result\", data: json });\r\n            dispatch({ type: \"view-loaded\" });\r\n        })\r\n    )\r\n\r\n}","import React, { Fragment } from 'react'\r\nimport { connect } from 'react-redux';\r\n\r\nconst Result = (props) => {\r\n    const orderedNumbers = props.result?.numbersList?.map((value, i = 1) => {\r\n        if((i+1) % props.result?.columns == 0) {\r\n            return (\r\n                <Fragment key={i}>\r\n                    <span className='numero'>{value}</span>\r\n                    <br/>\r\n                </Fragment>\r\n            );\r\n        }\r\n        return (<span className='numero' key={i}>{value} </span>);\r\n    })\r\n    return <div className='titulo'>\r\n        <h3 className='subtitulo'>↓ Numeros generados ↓</h3>\r\n        <div className='contenedorNumeros'>\r\n            {orderedNumbers}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nconst stateMapToProps = state => {\r\n    return {\r\n        columns: state.random.result?.columns,\r\n        result: state.random.result\r\n    }\r\n}\r\n\r\nexport default connect(stateMapToProps)(Result)\r\n","import React, { Component } from 'react'\r\nimport From from '../components/From'\r\nimport Result from '../components/Result'\r\n\r\nclass App extends Component { // component stateful\r\n    render() {\r\n        return ( \r\n            <div className='container'>\r\n                <div className='titulo'>\r\n                    <h1>Numeros random!</h1>\r\n                </div>\r\n                <div className='body'>\r\n                    <div className='main'>\r\n                        <From />\r\n                        <Result />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","import React from 'react'\r\nimport { render } from 'react-dom'\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport { Provider } from 'react-redux'\r\nimport thunk from 'redux-thunk'\r\nimport { createLogger } from 'redux-logger'\r\nimport reducer from './reducers'\r\nimport App from './containers/App'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport './index.css'\r\n\r\nconst middleware = [ thunk ]\r\nif (process.env.NODE_ENV !== 'production') {\r\n    middleware.push(createLogger())\r\n}\r\n\r\nconst store = createStore(\r\n    reducer,\r\n    composeWithDevTools(applyMiddleware(...middleware))\r\n)\r\n\r\nrender(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}